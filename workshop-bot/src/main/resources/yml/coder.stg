createTemplate(id, username, password, fqdn, repo, oauth) ::= <<
apiVersion: v1
kind: Service
metadata:
 name: coder-svc
 namespace: <id>
spec:
 ports:
 - port: 8443
   name: coder
   protocol: TCP
 - port: 8080
   name: app
   protocol: TCP
 selector:
   app: <id>
 type: ClusterIP
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: coder-volume
  namespace: <id>
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 60Gi
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: <id>
  name: coder-deployment
  namespace: <id>
spec:
  selector:
    matchLabels:
      app: <id>
  replicas: 1
  template:
    metadata:
      labels:
        app: <id>
    annotations:
      cluster-autoscaler.kubernetes.io/safe-to-evict: "false"
    spec:
      containers:
      - image: nthomsonpivotal/code-server-workspace
        imagePullPolicy: Always
        name: coder
        env:
        - name: WORKSHOP_ID
          value: "<id>"
        - name: WORKSHOP_APP_ENDPOINT
          value: "app-<fqdn>"
        ports:
        - containerPort: 8443
          name: coder
        - containerPort: 8080
          name: app
        volumeMounts:
        - name: coder-storage
          mountPath: /mnt/coder
        resources:
          limits:
            memory: "4Gi"
        readinessProbe:
          httpGet:
            path: /ping
            port: 8443
          initialDelaySeconds: 15
          periodSeconds: 5
      initContainers:
      - name: load
        image: nthomsonpivotal/code-server-lifecycle
        env:
        - name: WORKSHOP_GIT
          value: "<repo>"
        - name: WORKSHOP_ID
          value: "<id>"
        volumeMounts:
        - name: coder-storage
          mountPath: /mnt/coder
        envFrom:
        - secretRef:
            name: coder-secrets
      volumes:
      - name: coder-storage
        persistentVolumeClaim:
          claimName: coder-volume
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    nginx.ingress.kubernetes.io/auth-url: "https://<oauth>/validate?users=<username>"
    nginx.ingress.kubernetes.io/auth-signin: "https://<oauth>/login?rd=$scheme://$http_host$request_uri&token=$auth_resp_jwt&err=$auth_resp_err"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      auth_request_set $auth_resp_jwt $upstream_http_x_oauth_jwt;
      auth_request_set $auth_resp_err $upstream_http_x_oauth_error;
  name: coder-ingress
  namespace: <id>
spec:
  tls:
  - hosts:
    - <fqdn>
    secretName: coder-tls-secret
  rules:
    - host: <fqdn>
      http:
        paths:
          - backend:
              serviceName: coder-svc
              servicePort: 8443
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: "nginx"
  name: coder-ingress-app
  namespace: <id>
spec:
  tls:
  - hosts:
    - app-<fqdn>
    secretName: coder-tls-secret
  rules:
    - host: app-<fqdn>
      http:
        paths:
          - backend:
              serviceName: coder-svc
              servicePort: 8080
>>

destroyTemplate(id, username) ::= <<
apiVersion: batch/v1
kind: Job
metadata:
  name: coder-destroy
  namespace: <id>
spec:
  template:
    metadata:
      name: coder-cleanup
    spec:
      containers:
      - name: destroy
        image: nthomsonpivotal/code-init
        imagePullPolicy: Always
        command:
         - "/src/init-scripts/destroy.sh"
        env:
        - name: WORKSHOP_ID
          value: "<id>"
        volumeMounts:
        - name: coder-storage
          mountPath: /mnt/coder
        envFrom:
        - secretRef:
            name: coder-secrets
      volumes:
      - name: coder-storage
        persistentVolumeClaim:
          claimName: coder-volume
      restartPolicy: Never
>>
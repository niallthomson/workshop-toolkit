---
apiVersion: v1
kind: Service
metadata:
 name: coder-svc-${id}
 namespace: ${namespace}
spec:
 ports:
 - port: 8080
   name: coder
   protocol: TCP
 - port: 8000
   name: app
   protocol: TCP
 selector:
   app: ${id}
 type: ClusterIP
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: coder-volume-${id}
  namespace: ${namespace}
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 60Gi
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: ${id}
  name: coder-deployment-${id}
  namespace: ${namespace}
spec:
  selector:
    matchLabels:
      app: ${id}
  replicas: 1
  template:
    metadata:
      labels:
        app: ${id}
      annotations:
        "cluster-autoscaler.kubernetes.io/safe-to-evict": "false"
    spec:
      containers:
      - image: ${image}
        imagePullPolicy: Always
        name: coder
        env:
        - name: WORKSHOP_ID
          value: "${id}"
        - name: WORKSHOP_APP_ENDPOINT
          value: "app-${fqdn}"
        ports:
        - containerPort: 8080
          name: coder
        - containerPort: 8000
          name: app
        volumeMounts:
        - name: coder-storage-${id}
          mountPath: /mnt/coder
        resources:
          limits:
            memory: "4Gi"
        readinessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 5
      initContainers:
      - name: load
        image: nthomsonpivotal/code-server-lifecycle:1573592124
        env:
        - name: WORKSHOP_GIT
          value: "${repo}"
        - name: WORKSHOP_ID
          value: "${id}"
        volumeMounts:
        - name: coder-storage-${id}
          mountPath: /mnt/coder
        envFrom:
        - secretRef:
            name: workspaces-secrets
      volumes:
      - name: coder-storage-${id}
        persistentVolumeClaim:
          claimName: coder-volume-${id}
      tolerations:
      - key: "workspace"
        operator: Equal
        value: "preallocated"
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: "nginx"
  name: coder-ingress-${id}
  namespace: ${namespace}
spec:
  tls:
  - hosts:
    - ${fqdn}
    secretName: wildcard-tls-secret
  rules:
    - host: ${fqdn}
      http:
        paths:
          - backend:
              serviceName: coder-svc-${id}
              servicePort: 8080
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: "nginx"
  name: coder-ingress-app-${id}
  namespace: ${namespace}
spec:
  tls:
  - hosts:
    - app-${fqdn}
    secretName: wildcard-tls-secret
  rules:
    - host: app-${fqdn}
      http:
        paths:
          - backend:
              serviceName: coder-svc-${id}
              servicePort: 8000